import { NextApiRequest, NextApiResponse } from 'next';
import paypal from '@paypal/checkout-server-sdk';

const clientId = 'AX02KKB08FL1co6IH1Ci8HXnfqao5qO0a-LYxqhbVYWCnE98ZNdy096a4siRmRIK8Y3AA_m4OFFUHETZ';
const clientSecret = 'EKOy_a596f1ZlHPqDU84TkMfwbk8E5TWHqSYe5iK83Saau6LXSAI6s1bcsvgfzMhfsAjn-cZPiYgef2f';

const environment = new paypal.core.SandboxEnvironment(clientId, clientSecret);
const client = new paypal.core.PayPalHttpClient(environment);

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
    if (req.method === 'POST') {
        const { totalPrice, startDate, endDate, listingId } = req.body;

        // Création de la commande de paiement PayPal
        const request = new paypal.orders.OrdersCreateRequest();
        request.prefer('return=representation');
        request.requestBody({
            intent: 'CAPTURE',
            purchase_units: [{
                amount: {
                    currency_code: 'USD',
                    value: totalPrice.toString() // Convertir en string
                }
            }]
        });

        try {
            const response = await client.execute(request);
            const approvalUrl = response.result.links.find((link: { rel: string, href: string }) => link.rel === 'approve')?.href;
            res.status(200).json({ approvalUrl });
        } catch (error) {
            console.error('Erreur lors de la création de la commande PayPal : ', error);
            res.status(500).json({ message: 'Erreur lors du paiement' });
        }
    } else {
        res.setHeader('Allow', ['POST']);
        res.status(405).end('Method Not Allowed');
    }
}











