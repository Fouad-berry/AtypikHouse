// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  favoriteIds String[] @db.ObjectId
  role String @default("user")
  verificationCode String?

  accounts Account[]
  listings Listing[]
  reservations Reservation[]
  comments Comment[]
  sentMessages Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  contactMessages ContactMessage[] @relation("UserContactMessages") // Relation avec ContactMessage
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  createdAt DateTime @default(now())
  senderId String @db.ObjectId
  receiverId String @db.ObjectId
  sender User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}

model ContactMessage {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  yourname String      // Champ unique pour le nom complet
  email String         // Email de l'utilisateur
  phone String         // Numéro de téléphone de l'utilisateur
  message String       // Contenu du message
  createdAt DateTime @default(now())
  userId String? @db.ObjectId
  user User? @relation("UserContactMessages", fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_tokeN String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  imageSrc String[]
  createAt DateTime @default(now())
  category String
  roomCount Int
  bathroomCount Int
  guestCount Int
  locationvalue String
  userId String @db.ObjectId
  price Int
  equipment String[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
  comments Comment[]
}

model Reservation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  listingId String @db.ObjectId
  startDate DateTime
  endDate DateTime
  totalPrice Int
  createAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  payment Payment @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  createdAt DateTime @default(now())
  userId String @db.ObjectId
  listingId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Payment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  totalPrice Int
  createdAt DateTime @default(now())
  status String @default("pending")
  travelerName String
  orderNumber String @default(cuid())
  reservations Reservation[]
}

model Equipment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  image String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
